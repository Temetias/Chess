[{"/mnt/c/Users/karpp/coding/chess/frontend/src/index.tsx":"1","/mnt/c/Users/karpp/coding/chess/frontend/src/reportWebVitals.ts":"2","/mnt/c/Users/karpp/coding/chess/frontend/src/App.tsx":"3","/mnt/c/Users/karpp/coding/chess/frontend/src/game.ts":"4"},{"size":500,"mtime":1607782988615,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1607782988625,"results":"7","hashOfConfig":"6"},{"size":4189,"mtime":1607809618812,"results":"8","hashOfConfig":"6"},{"size":8222,"mtime":1607850106709,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"9mvayn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/karpp/coding/chess/frontend/src/index.tsx",[],["20","21"],"/mnt/c/Users/karpp/coding/chess/frontend/src/reportWebVitals.ts",[],"/mnt/c/Users/karpp/coding/chess/frontend/src/App.tsx",["22","23","24","25"],"import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  BoardPosition,\n  GameState,\n  flatten,\n  boardIdToPosition,\n  boardPositionToId,\n  Piece,\n  INITIAL_GAME_STATE,\n  Move,\n  PIECE_MOVE_CHECKS,\n  PieceData,\n  moveIsAllowed,\n  getAllowedMoves,\n} from \"./game\";\n\nconst BOARD_POSITIONS = flatten(\n  Array(8)\n    .fill({})\n    .map((_, x) =>\n      Array(8)\n        .fill({})\n        .map((_, y) => `${x}${y}`)\n    )\n).map(boardIdToPosition);\n\nconst isOdd = (x: number) => !!(x % 2);\n\nconst boardPositionToCssPosition = (boardPosition: BoardPosition) => ({\n  left: `${(boardPosition[0] / 8) * 100}%`,\n  top: `${(boardPosition[1] / 8) * 100}%`,\n});\n\nconst BoardPiece: React.FC<\n  Piece & {\n    boardPositionId: string;\n    active: boolean;\n    onClick: () => void;\n    clickable: boolean;\n  }\n> = ({ type, side, boardPositionId, active, onClick, clickable }) => {\n  const boardPosition = boardIdToPosition(boardPositionId);\n  return (\n    <div\n      className={`Board-piece ${active ? \"active\" : \"\"}`}\n      style={{\n        ...boardPositionToCssPosition(boardPosition),\n        pointerEvents: clickable ? \"all\" : \"none\",\n      }}\n      onClick={() => onClick()}\n    >\n      <i className={`fas fa-3x fa-chess-${type} ${side}-piece`}></i>\n    </div>\n  );\n};\n\nconst BoardSquare: React.FC<{\n  boardPosition: BoardPosition;\n  onClick: (boardPosition: BoardPosition) => void;\n}> = ({ boardPosition, onClick }) => (\n  <div\n    className={`Board-square ${\n      isOdd(boardPosition[0] + boardPosition[1]) ? \"black\" : \"white\"\n    }`}\n    onClick={() => onClick(boardPosition)}\n    style={boardPositionToCssPosition(boardPosition)}\n  >\n    {boardPositionToId(boardPosition)}\n  </div>\n);\n\nconst Board: React.FC = () => {\n  const [activePiece, setActivePiece] = useState<string | null>(null);\n  const [currentGameState, setCurrentGameState] = useState<GameState>(\n    INITIAL_GAME_STATE\n  );\n  return (\n    <div className=\"Board-wrap\">\n      <div className=\"Board\">\n        {BOARD_POSITIONS.map((boardPosition) => (\n          <BoardSquare\n            key={boardPositionToId(boardPosition)}\n            boardPosition={boardPosition}\n            onClick={(boardPosition: BoardPosition) => {\n              const activePieceData = activePiece\n                ? currentGameState.boardState[activePiece]\n                : null;\n              if (\n                activePieceData &&\n                moveIsAllowed(\n                  {\n                    type: activePieceData.type,\n                    boardPosition: boardIdToPosition(activePiece!),\n                    side: activePieceData.side,\n                  },\n                  currentGameState,\n                  boardPosition\n                )\n              ) {\n                setCurrentGameState({\n                  winner: null,\n                  turn: currentGameState.turn === \"white\" ? \"black\" : \"white\",\n                  boardState: {\n                    ...currentGameState.boardState,\n                    [boardPositionToId(boardPosition)]: {\n                      ...activePieceData,\n                      hasMoved: true,\n                    },\n                    [activePiece!]: undefined,\n                  },\n                });\n                setActivePiece(null);\n              }\n            }}\n          />\n        ))}\n        {Object.keys(currentGameState.boardState).map((boardPositionId) => {\n          const piece = currentGameState.boardState[boardPositionId];\n          return piece ? (\n            <BoardPiece\n              key={boardPositionId}\n              active={boardPositionId === activePiece}\n              clickable={currentGameState.turn === piece.side}\n              onClick={() =>\n                currentGameState.turn === piece.side\n                  ? setActivePiece(boardPositionId)\n                  : null\n              }\n              boardPositionId={boardPositionId}\n              {...piece}\n            />\n          ) : null;\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Chess</h1>\n      </header>\n      <main>\n        <Board />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","/mnt/c/Users/karpp/coding/chess/frontend/src/game.ts",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":11,"column":3,"nodeType":"32","messageId":"33","endLine":11,"endColumn":7},{"ruleId":"30","severity":1,"message":"34","line":12,"column":3,"nodeType":"32","messageId":"33","endLine":12,"endColumn":20},{"ruleId":"30","severity":1,"message":"35","line":13,"column":3,"nodeType":"32","messageId":"33","endLine":13,"endColumn":12},{"ruleId":"30","severity":1,"message":"36","line":15,"column":3,"nodeType":"32","messageId":"33","endLine":15,"endColumn":18},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"@typescript-eslint/no-unused-vars","'Move' is defined but never used.","Identifier","unusedVar","'PIECE_MOVE_CHECKS' is defined but never used.","'PieceData' is defined but never used.","'getAllowedMoves' is defined but never used.","no-global-assign","no-unsafe-negation"]