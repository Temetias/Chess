[{"/mnt/c/Users/karpp/coding/chess/frontend/src/index.tsx":"1","/mnt/c/Users/karpp/coding/chess/frontend/src/reportWebVitals.ts":"2","/mnt/c/Users/karpp/coding/chess/frontend/src/App.tsx":"3","/mnt/c/Users/karpp/coding/chess/frontend/src/game.ts":"4"},{"size":500,"mtime":1607782988615,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1607782988625,"results":"7","hashOfConfig":"6"},{"size":4195,"mtime":1608654389902,"results":"8","hashOfConfig":"6"},{"size":11942,"mtime":1608655283093,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"9mvayn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/karpp/coding/chess/frontend/src/index.tsx",[],["20","21"],"/mnt/c/Users/karpp/coding/chess/frontend/src/reportWebVitals.ts",[],"/mnt/c/Users/karpp/coding/chess/frontend/src/App.tsx",["22"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  BoardPosition,\n  GameState,\n  boardIdToPosition,\n  boardPositionToId,\n  Piece,\n  INITIAL_GAME_STATE,\n  calculateNextGamestate,\n} from \"./game\";\n\nconst BOARD_POSITIONS = Array(8)\n  .fill({})\n  .map((_, x) =>\n    Array(8)\n      .fill({})\n      .map((_, y) => `${x}${y}`)\n  )\n  .flat()\n  .map(boardIdToPosition);\n\nconst isOdd = (x: number) => !!(x % 2);\n\nconst boardPositionToCssPosition = (boardPosition: BoardPosition) => ({\n  left: `${(boardPosition[0] / 8) * 100}%`,\n  top: `${(boardPosition[1] / 8) * 100}%`,\n});\n\nconst BoardPiece: React.FC<\n  Piece & {\n    boardPositionId: string;\n    active: boolean;\n    onClick: () => void;\n    clickable: boolean;\n  }\n> = ({ type, side, boardPositionId, active, onClick, clickable }) => {\n  const boardPosition = boardIdToPosition(boardPositionId);\n  return (\n    <div\n      className={`Board-piece ${active ? \"active\" : \"\"}`}\n      style={{\n        ...boardPositionToCssPosition(boardPosition),\n        pointerEvents: clickable ? \"all\" : \"none\",\n      }}\n      onClick={() => onClick()}\n    >\n      <i className={`fas fa-3x fa-chess-${type} ${side}-piece`}></i>\n    </div>\n  );\n};\n\nconst BoardSquare: React.FC<{\n  boardPosition: BoardPosition;\n  onClick: (boardPosition: BoardPosition) => void;\n}> = ({ boardPosition, onClick }) => (\n  <div\n    className={`Board-square ${\n      isOdd(boardPosition[0] + boardPosition[1]) ? \"black\" : \"white\"\n    }`}\n    onClick={() => onClick(boardPosition)}\n    style={boardPositionToCssPosition(boardPosition)}\n  ></div>\n);\n\nconst X_MARKINGS = [\"x\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]] as [\n  string,\n  string[]\n];\nconst Y_MARKINGS = [\"y\", [\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]] as [\n  string,\n  string[]\n];\n\nconst Board: React.FC = () => {\n  const [activePiece, setActivePiece] = useState<string | null>(null);\n  const [currentGameState, setCurrentGameState] = useState<GameState>(\n    INITIAL_GAME_STATE\n  );\n\n  const onPieceClick = (piece: Piece, boardPositionId: string) =>\n    currentGameState.turn === piece.side\n      ? setActivePiece(boardPositionId)\n      : null;\n\n  const onBoardSquareClick = (boardPosition: BoardPosition) => {\n    const activePieceData = activePiece\n      ? currentGameState.boardState[activePiece]\n      : null;\n    if (activePieceData) {\n      const nextGameState = calculateNextGamestate(\n        {\n          ...activePieceData,\n          boardPosition: boardIdToPosition(activePiece!),\n        },\n        currentGameState,\n        boardPosition\n      );\n      setCurrentGameState(nextGameState);\n      if (nextGameState.winner) {\n        alert(`Game over! Winner: ${nextGameState.winner}`);\n      } else if (nextGameState.check) {\n        alert(\"Check\");\n      }\n      setActivePiece(null);\n    }\n  };\n\n  return (\n    <div className=\"Board-wrap\">\n      {[X_MARKINGS, Y_MARKINGS].map(([axis, marks]) => (\n        <div className={`Board-edge Board-edge--${axis}`} key={axis}>\n          {marks.map((mark) => (\n            <div className=\"Board-edge-item\" key={mark}>\n              {mark}\n            </div>\n          ))}\n        </div>\n      ))}\n      <div className=\"Board\">\n        {BOARD_POSITIONS.map((boardPosition) => (\n          <BoardSquare\n            key={boardPositionToId(boardPosition)}\n            boardPosition={boardPosition}\n            onClick={onBoardSquareClick}\n          />\n        ))}\n        {Object.keys(currentGameState.boardState).map((boardPositionId) => {\n          const piece = currentGameState.boardState[boardPositionId];\n          return piece ? (\n            <BoardPiece\n              key={boardPositionId}\n              active={boardPositionId === activePiece}\n              clickable={currentGameState.turn === piece.side}\n              onClick={() => onPieceClick(piece, boardPositionId)}\n              boardPositionId={boardPositionId}\n              {...piece}\n            />\n          ) : null;\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Chess</h1>\n      </header>\n      <main>\n        <Board />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","/mnt/c/Users/karpp/coding/chess/frontend/src/game.ts",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":1,"column":17,"nodeType":"29","messageId":"30","endLine":1,"endColumn":26},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]